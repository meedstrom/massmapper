#+TITLE: Massmapper
#+AUTHOR: Martin Edström
#+EMAIL: meedstrom91@gmail.com
#+LANGUAGE: en
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.

# [[https//img.shields.io/badge/license-GPL3+-blue.png]]

The long-absent Emacs facility to systematically remap key bindings.

Ever tried to "move Control to Super" inside Emacs, but found it much harder to do well than you thought, and gave up?  Then you're in luck, this package solves that kind of thing!

* Install

Not yet on (M)ELPA.  With [[https://github.com/raxod502/straight.el][straight.el]], you can install the package like so:

#+begin_src elisp
(use-package massmapper
  :straight (massmapper :type git :host github :repo "meedstrom/massmapper"))
#+end_src

* Setup

Setup consists of two steps:

1. Configure =massmapper-keymap-found-hook=
2. Turn it on by typing =M-x massmapper-mode RET=

That's it! To see what has been remapped, try =M-x massmapper-list-remaps RET=.

It'll edit every keymap it finds, which it finds over time as your Emacs session sees new major and minor modes.

# Note that you can add and remove functions to the hook at any time, but if you regret some effects, you'll have to restart Emacs.

* What to put on the hook?

For now, Massmapper ships three categories of functions you can add to =massmapper-keymap-found-hook=.  The first category is easy to explain, so we'll start with that:

** Mirroring modifiers

With the following functions, the idea is to simply copy key bindings from one modifier, such as "C-", to another modifier, such as "H-", so that both do the same thing.

Hopefully the names are self-explanatory.  Add any one of these functions:

- =massmapper-define-super-like-ctl=
- =massmapper-define-super-like-ctlmeta=
- =massmapper-define-super-like-meta=

and any one of:

- =massmapper-define-alt-like-ctl=
- =massmapper-define-alt-like-ctlmeta=
- =massmapper-define-alt-like-meta=

and any one of:

- =massmapper-define-hyper-like-ctl=
- =massmapper-define-hyper-like-ctlmeta=
- =massmapper-define-hyper-like-meta=

and any or all of (experimental):

- =massmapper-define-althyper-like-ctlmeta=
- =massmapper-define-altsuper-like-ctlmeta=
- =massmapper-define-hypersuper-like-ctlmeta=

** Homogenize
For those of you coming here from [[https://github.com/meedstrom/deianira][Deianira]], the original reason I made this library:

- =massmapper-homogenize=

This function is a big deal!  It's the one I keep using, no matter what.

For a deeper explanation, see the README of that package.  In short, homogenizing means we forbid any difference between "similar" key sequences such as =C-x C-e= and =C-x e=, i.e. where the leaf is the same in each step.  We bind both key sequences to the same command, so it won’t matter if you keep holding down Control or not, after initiating that key sequence.

The "master copy" is the one with fewer chords, i.e. =C-x e=, whose binding overrides the one on =C-x C-e=.  This can be customized on a case-by-case basis in the variable =massmapper-homogenizing-winners=.

Why we would do something so hare-brained?  It supports cross-training with the Deianira input paradigm, which by design cannot represent a difference between such key sequences (and considers this a feature, not a bug).

An example config follows.  This is not a place where the concept of "sane defaults" applies, so please take ownership!  You'll want to customize gradually over time.  Would you prefer to preserve your ~C-x f~ command or your ~C-x C-f~ command?  It's hard to know when thinking about it, only experience will tell you.  But this is *absolutely key* to becoming comfortable.

#+begin_src elisp
(add-hook 'massmapper-keymap-found-hook #'massmapper-homogenize -50)
(setq massmapper-homogenizing-winners
  '(("C-c C-c")
    (find-file)
    ("C-x C-f" . global-map)
    ("C-x C-s" . global-map)
    ("C-x C-;" . global-map)
    ("C-h C-g" . global-map)
    ("C-c C-," . org-mode-map)))
#+end_src

** Conserve the behavior of Return and Tab

This one's still a bit experimental:

- =massmapper-conserve-ret-and-tab=

The intent of this function is just to free up the =C-m= and =C-i= keys so they can be rebound to anything you want without destroying the behavior of your Return and Tab keys, which would normally happen.

Two gotchas:

Gotcha 1: Don't rebind =C-m= or =C-i= yourself.  Record your preferences in the variable =massmapper-Cm-Ci-override= and let Massmapper do it for you.

Gotcha 2: This only works in GUI Emacs.  After all, basic terminal environments like the TTY are the original reason that =C-m= works as an alias for =RET= and =C-i= works as an alias for =TAB=.  No getting around that.

*** To EXWM users

Instead of using =massmapper-conserve-ret-and-tab=, I invite you to just deprecate Control via =massmapper-define-super-like-ctl=.  Doing so under [[https://github.com/ch11ng/exwm][EXWM]] has the nice side effect that you can control other GUI apps such as Firefox with zero interference from Emacs hotkeys because Firefox uses Control and Emacs uses Super.

You may know that Apple did a bizarro version of this same approach vis a vis their "Terminal.app", but in Apple's world, all GUI apps are controlled by the Super key because GUI apps are the "important" apps and the Terminal is legacy.

By contrast, in the EXWM world plus =massmapper-define-super-like-ctl=, all GUI apps (including terminals---how strange to refer to them as "GUI" apps!) are controlled by Control because they are all legacy.

To put it differently, it's not just the terminal that's an annoying relic from the Old World, it's every app aside from Emacs itself (which is of course the future of computing), so we put them all on the same playing field; let them fight for the Control key and let Emacs ascend above the drama.

* Appendix
*** Tip: Binding under the "old" prefix

Let's say you want to stop using the Control key altogether in favour of Super.

Even then, it can look clean to *bind only Control keys in your initfiles*, knowing that =massmapper-define-super-like-ctl= will copy everything to Super for you.

I.e. to keep binding "C-" keys instead of "s-" keys.

One advantage of doing so is that Control and Super then perfectly mirror each other, useful in the event Super has a service outage for any reason, like you install GNOME or you enter the TTY, or you plug in a keyboard that lacks a Right Super key but has a Right Control.

There can be cases when you want a Super key to behave different from the Control key it was supposed to mirror.  In that case, simply bind it directly, and Massmapper will respect it.

A typical example is =s-m=.  Since you cannot re-bind =C-m= without destroying your =RET= key, you would probably never re-bind =C-m=.  But you can bind =s-m= to anything you please!

Just mind that global-map is the lowest-priority keymap.  So if you want a new =s-m= that applies everywhere, you probably want to bind it in General's =general-override-mode-map= or using bind-key's =bind-key*=.

*** Under the hood

If you're curious about what the package does to your Emacs, it may be nice to set =(setq massmapper-debug-level 1)= for a while.

Don't forget the command =M-x massmapper-list-remaps RET=.

When you develop a package like this, you run into many gotchas.  I learned not to utilize key translations such as =(define-key key-translation-map (kbd "C-c") (kbd "s-c"))= even though they seem like a clean solution.

So what does Massmapper do?  It scans each and every keymap variable, such as =global-map=, =org-mode-map= and =projectile-mode-map=, and makes new key-bindings inside each, based on other key-bindings found within.  Brute-force, but works as intended 100% of the time.

*** Gotcha: bind now, not later

In your initfiles, it's safest to place your =(massmapper-mode)= invocation /after/ all key-bindings are done.  If you have messy initfiles, after-init-hook is reasonable:

: (add-hook 'after-init-hook #'massmapper-mode)

This may sound like you should worry about key-bindings made inside =with-eval-after-load= and the like, but that's not a problem -- Massmapper will work correctly.

Unless you edit keymaps unrelated to the loaded package, like:

#+begin_src elisp
(with-eval-after-load 'eshell
  (with-eval-after-load 'helm
    (define-key global-map (kbd "M-r") #'helm-eshell-prompts-all)))
#+end_src

i.e. you add a binding to global-map only after eshell and helm have loaded.

This is not the way.  Bind your keys in each map /as they come into existence/, and don't touch them from then on.  Since global-map comes into existence at init time, make all modifications to it at init time!

The above is better done as simply

#+begin_src elisp
(define-key global-map (kbd "M-r") #'helm-eshell-prompts-all)
#+end_src

and letting the built-in autoloads load Helm and Eshell.  That way, Massmapper always has the correct idea, plus it makes life easier for all packages that inspect keymaps for any reason.

Expect autoloads to be present: if they aren't, that's a bug.  I'd wager that most cases of missing autoloads come from the way people use =use-package=, in which case see its =:commands= keyword, or you can put the following line together with the key definition (I've not had to do either):

#+begin_src elisp
(autoload #'helm-eshell-prompts-all "helm" t)
#+end_src

*** Gotcha: C-g is a hardcoded "unfreeze Emacs"

Emacs hardcodes =C-g= as the "unfreeze Emacs" key.

Unfortunately when Emacs freezes, nothing else than =C-g= will get it out of that state.  This package will dutifully copy the =keyboard-quit= command to =s-g= or wherever, but when Emacs is frozen, the keymaps aren't being looked up at all!

I'm sure that many people through the ages have tried in good faith to bind =keyboard-quit= to =<escape>= or some such representative of modernity, only to give up when they saw that the result wasn't consistent.

I surmise we can't remove the =C-g= behavior from =C-g= itself because of TTYs, but it should be possible to add /more/ keyboard interrupts than just =C-g=.  Emacs would probably need a compile-time option, which could maybe become a startup parameter or Lisp setting.

There is nothing Massmapper can do from within Emacs Lisp.  If you really want to move the =C-g= behavior, you could tell your window manager or [[https://github.com/kmonad/kmonad][kmonad]] to send a real =C-g= in place of =s-g= or whichever key you prefer.  That gets a bit crazy if it's the Escape key you want to give this behavior... because that breaks other apps.  You would need a WM that's aware of whether Emacs is in focus or not.

*** Gotcha: C-g is sometimes a hardcoded "cancel-button"
Aside from the above, some Emacs Lisp functions hardcode =C-g= as a "cancel" action, but this can usually be circumvented with a key-translation---which for your information, Massmapper won't do by default.  This tends to do the trick:

#+begin_src elisp
(define-key input-decode-map (kbd "s-g") (kbd "C-g"))
#+end_src

In very rare cases, mainly =map-y-or-n-p= that I've seen, a function [[https://lists.gnu.org/archive/html/bug-gnu-emacs/2022-10/msg02195.html][actually uses read-event instead of read-key]], so that key-translations do nothing!  That's properly considered a bug and should be reported upstream.

*** Aside for developers

*If you're an Emacs Lisp programmer* wondering what's the appropriate thing to do instead of referring to =C-g=, it's to create a minor or major mode map and do a command-remapping for =keyboard-quit= in there, making no assumptions. I.e. do this:

#+begin_src elisp
(defvar-keymap my-map)
(define-key my-map [remap keyboard-quit] #'my-wrapper-for-keyboard-quit)
;; Also this, if `my-map' may be activated from within the minibuffer
(define-key my-map [remap abort-recursive-edit] #'my-wrapper-for-abort-recursive-edit)
#+end_src

NOT this:

#+begin_src elisp
(defvar-keymap my-map)
(define-key my-map (kbd "C-g") #'my-special-cancel-command)
#+end_src

Note that the imaginary command =my-wrapper-for-keyboard-quit= should probably call =keyboard-quit= itself at the end, like this example from my package [[https://github.com/meedstrom/asyncloop][asyncloop]]:

#+begin_src elisp
(defun asyncloop-keyboard-quit ()
  "Wrapper for `keyboard-quit' that also cancels all loops."
  (interactive)
  (unwind-protect
      (asyncloop-reset-all)
    (keyboard-quit)))
#+end_src

-----

If you are not able to use a major or minor mode map... just avoid these demon functions because they don't respect key translations:
- =read-event=
- =read-char=
- =read-char-exclusive=

Instead, use =read-key=, or higher-level functions such as =read-char-choice=, =read-multiple-choice=, =read-answer=, =read-char-from-minibuffer=, =y-or-n-p= etc.  See the Info manual chapter "(elisp)Reading Input".

As an alternative, you can try to design your program in such a way that when a quit comes, the right thing would happen automatically, but that's more art than science.

*** To users of which-key

If you use [[https://github.com/justbur/emacs-which-key][which-key]], it will have a lot of superfluous entries after =massmapper-homogenize=.  The following snippet will hide them.

#+begin_src elisp
;; Hide any key sequence involving more than one chord.  We have no reason to
;; see them after using `massmapper-homogenize'.
(with-eval-after-load 'which-key
  (cl-pushnew '((" .-." . nil) . t) which-key-replacement-alist
              :test #'equal))
#+end_src
